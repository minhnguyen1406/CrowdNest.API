<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventManagerWeb.API</name>
    </assembly>
    <members>
        <member name="M:EventManagerWeb.API.Controllers.EnrolledEventController.GetEnrolledEvents">
            <summary>
            Retrieve all available enrolled events
            </summary>
            <returns>Return all enrolled events</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EnrolledEventController.GetEnrolledEventById(System.Int32)">
            <summary>
            Retrive a enrolled event based on id
            </summary>
            <returns>Return the enrolled event</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EnrolledEventController.GetEnrolledEventsByUserId(System.Int32)">
            <summary>
            Retrive an enrolled event based on user id
            </summary>
            <returns>Return the list enrolled event with same customer id</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EnrolledEventController.SaveNewEnrolledEvent(EventManagerWeb.Entity.EnrolledEvent)">
            <summary>
            Save a new enrolled event
            </summary>
            <param name="enrolledEvent">Given a enrolled event</param>
            <returns>Returns status of enrolled event created</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EnrolledEventController.RemoveEnrolledEvent(System.Int32,System.Int32)">
            <summary>
            Delete an existing enrolled event
            </summary>
            <param name="id">Given enrolled event id</param>
            <returns>Returns status of enrolled event removed</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EventController.GetEvents">
            <summary>
            Retrieve all available events
            </summary>
            <returns>Return all events</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EventController.FilterEvents(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Filter events
            </summary>
            <returns>Return filtered events</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EventController.GetEventById(System.Int32)">
            <summary>       
            Retrive a event based on id
            </summary>
            <returns>Return the event</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EventController.SaveNewEvent(EventManagerWeb.Entity.Event)">
            <summary>
            Save a new event
            </summary>
            <param name="event">Given a event</param>
            <returns>Returns status of event created</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EventController.SaveUpdatedEvent(EventManagerWeb.Entity.Event)">
            <summary>
            Update an existing event
            </summary>
            <param name="event">Given event information to update</param>
            <returns>Returns status of event updated</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.EventController.RemoveEvent(System.Int32)">
            <summary>
            Delete an existing event
            </summary>
            <param name="id">Given event id</param>
            <returns>Returns status of event removed</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.UsersController.CreateUser(EventManagerWeb.Entity.User)">
            <summary>
            This is to add a new User
            </summary>
            <param name="user">Pass user object</param>
            <returns>Returns true/false</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.UsersController.Authenticate(EventManagerWeb.Entity.ViewModels.AuthenticateRequest)">
            <summary>
            This is to validate the user and render the token
            </summary>
            <param name="model"></param>
            <returns>Return a response</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.UsersController.GetUsers(System.Int32,System.Int32)">
            <summary>
            Get Users according to page size and page index
            </summary>
            <returns>Return a list of user</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.UsersController.GetUserByUsername(System.String)">
            <summary>
            Get User by username
            </summary>
            <returns>Return a user</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.UsersController.GetUserById(System.Int32)">
            <summary>
            Get User By Id
            </summary>
            <returns>Return a user</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.UsersController.GetUsersCount">
            <summary>
            Get User count
            </summary>
            <returns>Return a user</returns>
        </member>
        <member name="M:EventManagerWeb.API.Controllers.UsersController.SaveUpdatedUser(EventManagerWeb.Entity.User)">
            <summary>
            Update an existing user
            </summary>
            <param name="users">Given user information to update</param>
            <returns>Return the id of updated user</returns>
        </member>
    </members>
</doc>
